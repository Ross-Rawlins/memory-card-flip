{"version":3,"file":"game.model.js","sourceRoot":"","sources":["../../src/models/game.model.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAsD;AACtD,oDAM6B;AAE7B,MAAM,cAAc,GAAG,IAAI,iBAAM,CAAW;IAC1C,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;IACzD,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;CACrE,CAAC,CAAC;AAEH,MAAM,UAAU,GAAG,IAAI,iBAAM,CAAO;IAClC,QAAQ,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,EAAE,IAAI,EAAE;IAClD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,sBAAS,CAAC;QAC9B,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;CAC3C,CAAC,CAAC;AAEH,MAAM,UAAU,GAAG,IAAI,iBAAM,CAAO;IAClC,SAAS,EAAE;QACT,IAAI,EAAE,CAAC,cAAc,CAAC;QACtB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE;YACR,CAAC,GAAe,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC;YACrC,uCAAuC;SACxC;KACF;IACD,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE;CAC7C,CAAC,CAAC;AAEH,MAAM,UAAU,GAAG,IAAI,iBAAM,CAAuB;IAClD,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;IACtD,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC7C,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAC1C,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE;IAC5C,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;IACvB,SAAS,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;CAC7C,CAAC,CAAC;AAEH,kBAAe,kBAAQ,CAAC,KAAK,CAAuB,MAAM,EAAE,UAAU,CAAC,CAAC","sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\nimport {\n  GameState,\n  CardValue,\n  Position,\n  Card,\n  Move,\n} from '../types/game.types';\n\nconst PositionSchema = new Schema<Position>({\n  row: { type: Number, enum: [1, 2, 3, 4], required: true },\n  column: { type: String, enum: ['A', 'B', 'C', 'D'], required: true },\n});\n\nconst CardSchema = new Schema<Card>({\n  position: { type: PositionSchema, required: true },\n  value: {\n    type: String,\n    enum: Object.values(CardValue),\n    required: true,\n  },\n  matched: { type: Boolean, default: false },\n});\n\nconst MoveSchema = new Schema<Move>({\n  positions: {\n    type: [PositionSchema],\n    required: true,\n    validate: [\n      (val: Position[]) => val.length === 2,\n      'Move must contain exactly 2 positions',\n    ],\n  },\n  matched: { type: Boolean, required: true },\n  timestamp: { type: Date, default: Date.now },\n});\n\nconst GameSchema = new Schema<GameState & Document>({\n  gameId: { type: String, required: true, unique: true },\n  cards: { type: [CardSchema], required: true },\n  moves: { type: [MoveSchema], default: [] },\n  startTime: { type: Date, default: Date.now },\n  endTime: { type: Date },\n  completed: { type: Boolean, default: false },\n});\n\nexport default mongoose.model<GameState & Document>('Game', GameSchema);\n"]}