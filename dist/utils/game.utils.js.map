{"version":3,"file":"game.utils.js","sourceRoot":"","sources":["../../src/utils/game.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Card, CardValue, Position } from '../types/game.types';\n\nexport const generateUniqueId = (): string => {\n  const timestamp = Date.now().toString(36);\n  const randomStr = Math.random().toString(36).substring(2, 10);\n  return `${timestamp}-${randomStr}`;\n};\n\nexport const createInitialGameCards = (): Card[] => {\n  const cardValues = Object.values(CardValue);\n  const positions: Position[] = [];\n\n  for (const column of ['A', 'B', 'C', 'D'] as const) {\n    for (const row of [1, 2, 3, 4] as const) {\n      positions.push({ row, column });\n    }\n  }\n\n  shuffleArray(positions);\n\n  const cards: Card[] = [];\n  const pairsNeeded = positions.length / 2;\n\n  if (cardValues.length < pairsNeeded) {\n    throw new Error('Not enough unique card values for the game size');\n  }\n\n  for (let i = 0; i < pairsNeeded; i++) {\n    const value = cardValues[i];\n\n    cards.push({\n      position: positions[i * 2],\n      value,\n      matched: false,\n    });\n\n    cards.push({\n      position: positions[i * 2 + 1],\n      value,\n      matched: false,\n    });\n  }\n\n  return cards;\n};\n\nconst shuffleArray = <T>(array: T[]): void => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};\n\nexport const getCardByPosition = (\n  cards: Card[],\n  position: Position\n): Card | undefined => {\n  return cards.find(\n    (card) =>\n      card.position.row === position.row &&\n      card.position.column === position.column\n  );\n};\n\nexport const validatePosition = (position: any): boolean => {\n  const validRows = [1, 2, 3, 4];\n  const validColumns = ['A', 'B', 'C', 'D'];\n\n  return (\n    position &&\n    validRows.includes(position.row) &&\n    validColumns.includes(position.column)\n  );\n};\n\nexport const isGameComplete = (cards: Card[]): boolean => {\n  return cards.every((card) => card.matched);\n};\n"]}