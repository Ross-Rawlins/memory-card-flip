{"version":3,"file":"game.controller.js","sourceRoot":"","sources":["../../src/controllers/game.controller.ts"],"names":[],"mappings":"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","sourcesContent":["// src/controllers/game.controller.ts\nimport { Request, Response } from 'express';\nimport Game from '../models/game.model';\nimport {\n  createInitialGameCards,\n  generateUniqueId,\n  getCardByPosition,\n  validatePosition,\n  isGameComplete,\n} from '../utils/game.utils';\nimport { Position } from '../types/game.types';\n\nexport const startNewGame = async (\n  res: Response\n): Promise<\n  Response<{ gameId: string; message: string } | { error: string }>\n> => {\n  try {\n    const gameId = generateUniqueId();\n    const cards = createInitialGameCards();\n\n    const newGame = new Game({\n      gameId,\n      cards,\n      startTime: new Date(),\n      completed: false,\n    });\n\n    await newGame.save();\n\n    return res.status(201).json({\n      gameId,\n      message: 'New game started successfully',\n    });\n  } catch (error) {\n    console.error('Error starting new game:', error);\n    return res.status(500).json({ error: 'Failed to start new game' });\n  }\n};\n\nexport const makeMove = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { gameId } = req.params;\n    const { firstCard, secondCard } = req.body;\n\n    if (!validatePosition(firstCard) || !validatePosition(secondCard)) {\n      res.status(400).json({ error: 'Invalid card positions' });\n      return;\n    }\n\n    if (\n      firstCard.row === secondCard.row &&\n      firstCard.column === secondCard.column\n    ) {\n      res.status(400).json({ error: 'Cannot select the same card twice' });\n      return;\n    }\n\n    const game = await Game.findOne({ gameId });\n\n    if (!game) {\n      res.status(404).json({ error: 'Game not found' });\n      return;\n    }\n\n    if (game.completed) {\n      res.status(400).json({ error: 'Game already completed' });\n      return;\n    }\n\n    const card1 = getCardByPosition(game.cards, firstCard as Position);\n    const card2 = getCardByPosition(game.cards, secondCard as Position);\n\n    if (!card1 || !card2) {\n      res.status(400).json({ error: 'One or more cards not found' });\n      return;\n    }\n\n    if (card1.matched || card2.matched) {\n      res.status(400).json({ error: 'One or more cards already matched' });\n      return;\n    }\n\n    const matched = card1.value === card2.value;\n\n    game.moves.push({\n      positions: [firstCard, secondCard] as [Position, Position],\n      matched,\n      timestamp: new Date(),\n    });\n\n    if (matched) {\n      card1.matched = true;\n      card2.matched = true;\n\n      const gameComplete = isGameComplete(game.cards);\n      if (gameComplete) {\n        game.completed = true;\n        game.endTime = new Date();\n      }\n    }\n\n    await game.save();\n\n    res.status(200).json({\n      matched,\n      gameComplete: game.completed,\n      movesCount: game.moves.length,\n      firstCardValue: card1.value,\n      secondCardValue: card2.value,\n    });\n  } catch (error) {\n    console.error('Error making move:', error);\n    res.status(500).json({ error: 'Failed to process move' });\n  }\n};\n\nexport const getGameState = async (\n  req: Request,\n  res: Response\n): Promise<void> => {\n  try {\n    const { gameId } = req.params;\n    const game = await Game.findOne({ gameId });\n\n    if (!game) {\n      res.status(404).json({ error: 'Game not found' });\n      return;\n    }\n\n    res.status(200).json({\n      gameId: game.gameId,\n      moves: game.moves.length,\n      startTime: game.startTime,\n      endTime: game.endTime,\n      completed: game.completed,\n      cards: game.cards.map((card) => ({\n        position: card.position,\n        matched: card.matched,\n        // Only show value if card is matched\n        value: card.matched ? card.value : undefined,\n      })),\n    });\n  } catch (error) {\n    console.error('Error getting game state:', error);\n    res.status(500).json({ error: 'Failed to retrieve game state' });\n  }\n};\n\nexport const getGameHistory = async (\n  req: Request,\n  res: Response\n): Promise<void> => {\n  try {\n    const { gameId } = req.params;\n    const game = await Game.findOne({ gameId });\n\n    if (!game) {\n      res.status(404).json({ error: 'Game not found' });\n      return;\n    }\n\n    res.status(200).json({\n      gameId: game.gameId,\n      moves: game.moves,\n      startTime: game.startTime,\n      endTime: game.endTime,\n      completed: game.completed,\n    });\n  } catch (error) {\n    console.error('Error getting game history:', error);\n    res.status(500).json({ error: 'Failed to retrieve game history' });\n  }\n};\n\nexport const getLeaderboard = async (res: Response): Promise<void> => {\n  try {\n    const leaderboard = await Game.find({ completed: true })\n      .sort({ 'moves.length': 1, endTime: 1 })\n      .limit(5)\n      .select('gameId moves startTime endTime')\n      .exec();\n\n    const formattedLeaderboard = leaderboard.map((game) => {\n      const duration = game.endTime\n        ? (game.endTime.getTime() - game.startTime.getTime()) / 1000\n        : 0;\n\n      return {\n        gameId: game.gameId,\n        moves: game.moves.length,\n        durationSeconds: duration,\n        startTime: game.startTime,\n        endTime: game.endTime,\n      };\n    });\n\n    res.status(200).json(formattedLeaderboard);\n  } catch (error) {\n    console.error('Error getting leaderboard:', error);\n    res.status(500).json({ error: 'Failed to retrieve leaderboard' });\n  }\n};\n"]}